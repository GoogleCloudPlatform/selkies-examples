# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 600s
substitutions:
  _IMAGE_FAMILY: selkies-image-cache
  _DISK_ZONE: us-west1-a
  _DISK_SIZE_GB: "256"
  _DISK_TYPE: "pd-ssd"
tags:
  - selkies-image-cache-disk
steps:
  ###
  # Create disk from image
  ###
  - name: gcr.io/cloud-builders/gcloud
    id: create-disk
    entrypoint: bash
    args:
      - -exc
      - |
        # Extract the timestamp from the image name, last element separated by '-'.
        ts=$(gcloud compute images list \
           --filter=name~${_IMAGE_FAMILY} \
          --sort-by=~creationTimestamp \
          --limit 1 \
          --format='value(name)' | cut -f1 | awk -F- '{print $$NF}')
        echo "$${ts}" | tee /workspace/disk-timestamp

        if [[ $(gcloud compute disks list --filter="name~${_IMAGE_FAMILY}-${_DISK_ZONE}-$${ts}" -q --format='value(name)' | wc -l) -gt 0 ]]; then
          echo "Disk already exists, skipping creation."
          exit 0
        fi

        # Create disk from image.
        gcloud compute disks create ${_IMAGE_FAMILY}-${_DISK_ZONE}-$${ts} \
          --image-family ${_IMAGE_FAMILY} \
          --image-project ${PROJECT_ID} \
          --zone ${_DISK_ZONE} \
          --size ${_DISK_SIZE_GB}GB \
          --type ${_DISK_TYPE}
  ###
  # Prune old disks
  ###
  - name: gcr.io/cloud-builders/gcloud
    id: prune-disks
    entrypoint: /bin/bash
    args:
      - -xc
      - |
        ts=$(cat /workspace/disk-timestamp)
        for disk in $(gcloud compute disks list --filter="name~${_IMAGE_FAMILY}-${_DISK_ZONE} name!~${_IMAGE_FAMILY}-${_DISK_ZONE}-$${ts} users[0]=null" -q --format='csv[no-heading](name,zone)'); do
          IFS="," read -ra toks <<< $${disk}
          gcloud compute disks delete -q $${toks[0]} --zone $${toks[1]}
        done
    waitFor:
      - create-disk
